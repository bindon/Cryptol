// Cryptol ARIA Implementation
// Korea University
// Wonbin Choi

// 1. 서론
// 암호키의 길이에 따라 ARIA-128, ARIA-192, ARIA-256으로 구분
module ARIA where

type ARIA128 = 4
//type ARIA192 = 6
//type ARIA256 = 8

// 5. 알고리즘 구조
//   <표 3>
//   			Nb	Nk	Nr
//   ARIA-128	16	16	12
//   ARIA-192	16	24	14
//   ARIA-256	16	32	16
type Nb = 16
type Nk = (ARIA128 * 4)
type Nr = Nk + 8

type ARIAKeySize  = (Nk*8)

// ck definition
ck : [3][128]
ck = [0x517cc1b727220a94fe13abe8fa9a6ee0, 
	  0x6db14acc9e21c820ff28b1d5ef5de2b0, 
	  0xdb92371d2126e9700324977504e8c90e]

// sbox definition
sbox1 : [256][8]
sbox1 = [
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

sbox1Inverse : [256][8]
sbox1Inverse = [
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

sbox2 : [256][8]
sbox2 = [
	0xe2, 0x4e, 0x54, 0xfc, 0x94, 0xc2, 0x4a, 0xcc, 0x62, 0x0d, 0x6a, 0x46, 0x3c, 0x4d, 0x8b, 0xd1,
	0x5e, 0xfa, 0x64, 0xcb, 0xb4, 0x97, 0xbe, 0x2b, 0xbc, 0x77, 0x2e, 0x03, 0xd3, 0x19, 0x59, 0xc1,
	0x1d, 0x06, 0x41, 0x6b, 0x55, 0xf0, 0x99, 0x69, 0xea, 0x9c, 0x18, 0xae, 0x63, 0xdf, 0xe7, 0xbb,
	0x00, 0x73, 0x66, 0xfb, 0x96, 0x4c, 0x85, 0xe4, 0x3a, 0x09, 0x45, 0xaa, 0x0f, 0xee, 0x10, 0xeb,
	0x2d, 0x7f, 0xf4, 0x29, 0xac, 0xcf, 0xad, 0x91, 0x8d, 0x78, 0xc8, 0x95, 0xf9, 0x2f, 0xce, 0xcd,
	0x08, 0x7a, 0x88, 0x38, 0x5c, 0x83, 0x2a, 0x28, 0x47, 0xdb, 0xb8, 0xc7, 0x93, 0xa4, 0x12, 0x53,
	0xff, 0x87, 0x0e, 0x31, 0x36, 0x21, 0x58, 0x48, 0x01, 0x8e, 0x37, 0x74, 0x32, 0xca, 0xe9, 0xb1,
	0xb7, 0xab, 0x0c, 0xd7, 0xc4, 0x56, 0x42, 0x26, 0x07, 0x98, 0x60, 0xd9, 0xb6, 0xb9, 0x11, 0x40,
	0xec, 0x20, 0x8c, 0xbd, 0xa0, 0xc9, 0x84, 0x04, 0x49, 0x23, 0xf1, 0x4f, 0x50, 0x1f, 0x13, 0xdc,
	0xd8, 0xc0, 0x9e, 0x57, 0xe3, 0xc3, 0x7b, 0x65, 0x3b, 0x02, 0x8f, 0x3e, 0xe8, 0x25, 0x92, 0xe5,
	0x15, 0xdd, 0xfd, 0x17, 0xa9, 0xbf, 0xd4, 0x9a, 0x7e, 0xc5, 0x39, 0x67, 0xfe, 0x76, 0x9d, 0x43,
	0xa7, 0xe1, 0xd0, 0xf5, 0x68, 0xf2, 0x1b, 0x34, 0x70, 0x05, 0xa3, 0x8a, 0xd5, 0x79, 0x86, 0xa8,
	0x30, 0xc6, 0x51, 0x4b, 0x1e, 0xa6, 0x27, 0xf6, 0x35, 0xd2, 0x6e, 0x24, 0x16, 0x82, 0x5f, 0xda,
	0xe6, 0x75, 0xa2, 0xef, 0x2c, 0xb2, 0x1c, 0x9f, 0x5d, 0x6f, 0x80, 0x0a, 0x72, 0x44, 0x9b, 0x6c,
	0x90, 0x0b, 0x5b, 0x33, 0x7d, 0x5a, 0x52, 0xf3, 0x61, 0xa1, 0xf7, 0xb0, 0xd6, 0x3f, 0x7c, 0x6d,
	0xed, 0x14, 0xe0, 0xa5, 0x3d, 0x22, 0xb3, 0xf8, 0x89, 0xde, 0x71, 0x1a, 0xaf, 0xba, 0xb5, 0x81
]

sbox2Inverse : [256][8]
sbox2Inverse = [
	0x30, 0x68, 0x99, 0x1b, 0x87, 0xb9, 0x21, 0x78, 0x50, 0x39, 0xdb, 0xe1, 0x72, 0x09, 0x62, 0x3c,
	0x3e, 0x7e, 0x5e, 0x8e, 0xf1, 0xa0, 0xcc, 0xa3, 0x2a, 0x1d, 0xfb, 0xb6, 0xd6, 0x20, 0xc4, 0x8d,
	0x81, 0x65, 0xf5, 0x89, 0xcb, 0x9d, 0x77, 0xc6, 0x57, 0x43, 0x56, 0x17, 0xd4, 0x40, 0x1a, 0x4d,
	0xc0, 0x63, 0x6c, 0xe3, 0xb7, 0xc8, 0x64, 0x6a, 0x53, 0xaa, 0x38, 0x98, 0x0c, 0xf4, 0x9b, 0xed,
	0x7f, 0x22, 0x76, 0xaf, 0xdd, 0x3a, 0x0b, 0x58, 0x67, 0x88, 0x06, 0xc3, 0x35, 0x0d, 0x01, 0x8b,
	0x8c, 0xc2, 0xe6, 0x5f, 0x02, 0x24, 0x75, 0x93, 0x66, 0x1e, 0xe5, 0xe2, 0x54, 0xd8, 0x10, 0xce,
	0x7a, 0xe8, 0x08, 0x2c, 0x12, 0x97, 0x32, 0xab, 0xb4, 0x27, 0x0a, 0x23, 0xdf, 0xef, 0xca, 0xd9,
	0xb8, 0xfa, 0xdc, 0x31, 0x6b, 0xd1, 0xad, 0x19, 0x49, 0xbd, 0x51, 0x96, 0xee, 0xe4, 0xa8, 0x41,
	0xda, 0xff, 0xcd, 0x55, 0x86, 0x36, 0xbe, 0x61, 0x52, 0xf8, 0xbb, 0x0e, 0x82, 0x48, 0x69, 0x9a,
	0xe0, 0x47, 0x9e, 0x5c, 0x04, 0x4b, 0x34, 0x15, 0x79, 0x26, 0xa7, 0xde, 0x29, 0xae, 0x92, 0xd7,
	0x84, 0xe9, 0xd2, 0xba, 0x5d, 0xf3, 0xc5, 0xb0, 0xbf, 0xa4, 0x3b, 0x71, 0x44, 0x46, 0x2b, 0xfc,
	0xeb, 0x6f, 0xd5, 0xf6, 0x14, 0xfe, 0x7c, 0x70, 0x5a, 0x7d, 0xfd, 0x2f, 0x18, 0x83, 0x16, 0xa5,
	0x91, 0x1f, 0x05, 0x95, 0x74, 0xa9, 0xc1, 0x5b, 0x4a, 0x85, 0x6d, 0x13, 0x07, 0x4f, 0x4e, 0x45,
	0xb2, 0x0f, 0xc9, 0x1c, 0xa6, 0xbc, 0xec, 0x73, 0x90, 0x7b, 0xcf, 0x59, 0x8f, 0xa1, 0xf9, 0x2d,
	0xf2, 0xb1, 0x00, 0x94, 0x37, 0x9f, 0xd0, 0x2e, 0x9c, 0x6e, 0x28, 0x3f, 0x80, 0xf0, 0x3d, 0xd3,
	0x25, 0x8a, 0xb5, 0xe7, 0x42, 0xb3, 0xc7, 0xea, 0xf7, 0x4c, 0x11, 0x33, 0x03, 0xa2, 0xac, 0x60
]

diffuse : [128] -> [128]
diffuse(value) = join [y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15]
	where
		splitValue = split`{16} value
		x0 = splitValue @ 0
		x1 = splitValue @ 1
		x2 = splitValue @ 2
		x3 = splitValue @ 3
		x4 = splitValue @ 4
		x5 = splitValue @ 5
		x6 = splitValue @ 6
		x7 = splitValue @ 7
		x8 = splitValue @ 8
		x9 = splitValue @ 9
		x10 = splitValue @ 10
		x11 = splitValue @ 11
		x12 = splitValue @ 12
		x13 = splitValue @ 13
		x14 = splitValue @ 14
		x15 = splitValue @ 15
		y0  =                x3 ^ x4      ^ x6      ^ x8 ^ x9                   ^ x13 ^ x14    
		y1  =           x2           ^ x5      ^ x7 ^ x8 ^ x9             ^ x12             ^ x15
		y2  =      x1           ^ x4      ^ x6                ^ x10 ^ x11 ^ x12             ^ x15
		y3  = x0                     ^ x5      ^ x7           ^ x10 ^ x11       ^ x13 ^ x14    
		y4  = x0      ^ x2           ^ x5           ^ x8            ^ x11             ^ x14 ^ x15
		y5  =      x1      ^ x3 ^ x4                     ^ x9 ^ x10                   ^ x14 ^ x15
		y6  = x0      ^ x2                     ^ x7      ^ x9 ^ x10       ^ x12 ^ x13            
		y7  =      x1      ^ x3           ^ x6      ^ x8            ^ x11 ^ x12 ^ x13            
		y8  = x0 ^ x1           ^ x4           ^ x7           ^ x10             ^ x13       ^ x15
		y9  = x0 ^ x1                ^ x5 ^ x6                      ^ x11 ^ x12       ^ x14    
		y10 =           x2 ^ x3      ^ x5 ^ x6      ^ x8                        ^ x13       ^ x15
		y11 =           x2 ^ x3 ^ x4           ^ x7      ^ x9             ^ x12       ^ x14    
		y12 =      x1 ^ x2                ^ x6 ^ x7      ^ x9       ^ x11 ^ x12                    
		y13 = x0           ^ x3           ^ x6 ^ x7 ^ x8      ^ x10             ^ x13            
		y14 = x0           ^ x3 ^ x4 ^ x5                ^ x9       ^ x11             ^ x14    
		y15 =      x1 ^ x2      ^ x4 ^ x5           ^ x8      ^ x10                         ^ x15

ltFunction : [32] -> [32]
ltFunction(value) = join [s1, s2, x1, x2]
	where
		splitValue = split`{4} value
		s1 = sbox1 @ (splitValue @ 0)
		s2 = sbox2 @ (splitValue @ 1)
		x1 = sbox1Inverse @ (splitValue @ 2)
		x2 = sbox2Inverse @ (splitValue @ 3)

xtFunction : [32] -> [32]
xtFunction(value) = join [s1, s2, x1, x2]
	where
		splitValue = split`{4} value
		s1 = sbox1Inverse @ (splitValue @ 0)
		s2 = sbox2Inverse @ (splitValue @ 1)
		x1 = sbox1 @ (splitValue @ 2)
		x2 = sbox2 @ (splitValue @ 3)

oddFunction : ([128], [128]) -> [128]
oddFunction (in, key) = diffuse(join [w0, w1, w2, w3])
	where
		value = in ^ key
		splitValue = split`{4} value
		w0 = ltFunction(splitValue @ 0)
		w1 = ltFunction(splitValue @ 1)
		w2 = ltFunction(splitValue @ 2)
		w3 = ltFunction(splitValue @ 3)

evenFunction : ([128], [128]) -> [128]
evenFunction (in, key) = diffuse(join [w0, w1, w2, w3])
	where
		value = in ^ key
		splitValue = split`{4} value
		w0 = xtFunction(splitValue @ 0)
		w1 = xtFunction(splitValue @ 1)
		w2 = xtFunction(splitValue @ 2)
		w3 = xtFunction(splitValue @ 3)

finalFunction : ([128], [128], [128]) -> [128]
finalFunction (in, key, finalKey) = join [w0, w1, w2, w3] ^ finalKey
	where
		value = in ^ key
		splitValue = split`{4} value
		w0 = xtFunction(splitValue @ 0)
		w1 = xtFunction(splitValue @ 1)
		w2 = xtFunction(splitValue @ 2)
		w3 = xtFunction(splitValue @ 3)		

stretchKey : [128] -> [512]
stretchKey masterKey = join [w0, w1, w2, w3]
	where
		w0 = masterKey
		w1 = oddFunction(w0, ck @ 0)  ^ zero : [128]
		w2 = evenFunction(w1, ck @ 1) ^ w0
		w3 = oddFunction(w2, ck @ 2)  ^ w1

generateEncKey : [128] -> [13][128]
generateEncKey masterKey = [ek1, ek2, ek3, ek4, ek5, ek6, ek7, ek8, ek9, ek10, ek11, ek12, ek13]
	where
		w0   = masterKey
		w1   = oddFunction(w0, ck @ 0)  ^ zero : [128]
		w2   = evenFunction(w1, ck @ 1) ^ w0
		w3   = oddFunction(w2, ck @ 2)  ^ w1
		ek1  = (w0)        ^ (w1 >>> 19)
		ek2  = (w1)        ^ (w2 >>> 19)
		ek3  = (w2)        ^ (w3 >>> 19)
		ek4  = (w0 >>> 19) ^ (w3)
		ek5  = (w0)        ^ (w1 >>> 31)
		ek6  = (w1)        ^ (w2 >>> 31)
		ek7  = (w2)        ^ (w3 >>> 31)
		ek8  = (w0 >>> 31) ^ (w3)
		ek9  = (w0)        ^ (w1 <<< 61)
		ek10 = (w1)        ^ (w2 <<< 61)
		ek11 = (w2)        ^ (w3 <<< 61)
		ek12 = (w0 <<< 61) ^ (w3)
		ek13 = (w0)        ^ (w1 <<< 31)

generateDecKey : [128] -> [13][128]
generateDecKey masterKey = [dk1, dk2, dk3, dk4, dk5, dk6, dk7, dk8, dk9, dk10, dk11, dk12, dk13]
	where
		encKey = generateEncKey(masterKey)
		dk1  =         encKey @ 12
		dk2  = diffuse(encKey @ 11)
		dk3  = diffuse(encKey @ 10)
		dk4  = diffuse(encKey @ 9 )
		dk5  = diffuse(encKey @ 8 )
		dk6  = diffuse(encKey @ 7 )
		dk7  = diffuse(encKey @ 6 )
		dk8  = diffuse(encKey @ 5 )
		dk9  = diffuse(encKey @ 4 )
		dk10 = diffuse(encKey @ 3 )
		dk11 = diffuse(encKey @ 2 )
		dk12 = diffuse(encKey @ 1 )
		dk13 =         encKey @ 0

encrypt : ([128], [128]) -> [128]
encrypt (plainText, key) = cipherText
	where
		ek  = generateEncKey(key)
		r1  = oddFunction (plainText, ek @ 0 )
		r2  = evenFunction(r1,        ek @ 1 )
		r3  = oddFunction (r2,        ek @ 2 )
		r4  = evenFunction(r3,        ek @ 3 )
		r5  = oddFunction (r4,        ek @ 4 )
		r6  = evenFunction(r5,        ek @ 5 )
		r7  = oddFunction (r6,        ek @ 6 )
		r8  = evenFunction(r7,        ek @ 7 )
		r9  = oddFunction (r8,        ek @ 8 )
		r10 = evenFunction(r9,        ek @ 9 )
		r11 = oddFunction (r10,       ek @ 10)
		cipherText = finalFunction (r11, ek @ 11, ek @ 12)

decrypt : ([128], [128]) -> [128]
decrypt (plainText, key) = cipherText
	where
		dk  = generateDecKey(key)
		r1  = oddFunction (plainText, dk @ 0 )
		r2  = evenFunction(r1,        dk @ 1 )
		r3  = oddFunction (r2,        dk @ 2 )
		r4  = evenFunction(r3,        dk @ 3 )
		r5  = oddFunction (r4,        dk @ 4 )
		r6  = evenFunction(r5,        dk @ 5 )
		r7  = oddFunction (r6,        dk @ 6 )
		r8  = evenFunction(r7,        dk @ 7 )
		r9  = oddFunction (r8,        dk @ 8 )
		r10 = evenFunction(r9,        dk @ 9 )
		r11 = oddFunction (r10,       dk @ 10)
		cipherText = finalFunction (r11, dk @ 11, dk @ 12)
